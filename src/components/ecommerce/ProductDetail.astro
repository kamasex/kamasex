---
// src/components/ecommerce/ProductDetail.astro
import WishlistButton from './WishlistButton.astro';

export interface Props {
  product: {
    id: string;
    name: string;
    description: string;
    price: number;
    originalPrice?: number;
    images: string[];
    category: string;
    subcategory?: string;
    brand?: string;
    inStock: boolean;
    stockQuantity?: number;
    rating?: number;
    reviewCount?: number;
    features?: string[];
    specifications?: Record<string, string>;
    variants?: {
      colors?: string[];
      sizes?: string[];
    };
    shippingInfo?: string;
    returnPolicy?: string;
  };
}

// Mock product data for demo
const mockProduct = {
  id: "vibrador-luxury-001",
  name: "Vibrador de Lujo Premium Silk Touch",
  description: "Experimenta el máximo placer con nuestro vibrador premium de silicona médica. Diseñado ergonómicamente para un ajuste perfecto y múltiples modos de vibración que te llevarán a nuevas dimensiones de placer.",
  price: 299000,
  originalPrice: 399000,
  images: [
    "/images/productos/vibrador-luxury-1.jpg",
    "/images/productos/vibrador-luxury-2.jpg", 
    "/images/productos/vibrador-luxury-3.jpg",
    "/images/productos/vibrador-luxury-4.jpg"
  ],
  category: "Juguetes",
  subcategory: "Vibradores",
  brand: "LELO",
  inStock: true,
  stockQuantity: 15,
  rating: 4.8,
  reviewCount: 142,
  features: [
    "Silicona médica 100% segura",
    "10 modos de vibración únicos",
    "Resistente al agua (IPX7)",
    "Carga USB magnética",
    "Funcionamiento silencioso",
    "2 años de garantía"
  ],
  specifications: {
    "Material": "Silicona médica premium",
    "Dimensiones": "20cm x 3.5cm",
    "Peso": "150g",
    "Batería": "Litio recargable",
    "Duración": "Hasta 2 horas",
    "Carga": "USB magnética",
    "Resistencia": "IPX7 - Sumergible",
    "Ruido": "< 50dB"
  },
  variants: {
    colors: ["Negro", "Rosa", "Púrpura"],
    sizes: ["S", "M", "L"]
  },
  shippingInfo: "Envío gratis en pedidos superiores a $150.000. Entrega en 24-48 horas en principales ciudades.",
  returnPolicy: "30 días para devoluciones. Producto debe estar sin usar y en empaque original."
};

const { product = mockProduct } = Astro.props;
const discount = product.originalPrice ? Math.round(((product.originalPrice - product.price) / product.originalPrice) * 100) : 0;
---

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
  <!-- Breadcrumb -->
  <nav class="flex mb-8" aria-label="Breadcrumb">
    <ol class="flex items-center space-x-2 text-sm">
      <li><a href="/" class="text-gray-500 hover:text-primary-500">Inicio</a></li>
      <li><span class="text-gray-400">/</span></li>
      <li><a href="/productos" class="text-gray-500 hover:text-primary-500">Productos</a></li>
      <li><span class="text-gray-400">/</span></li>
      <li><a href={`/categoria/${product.category.toLowerCase()}`} class="text-gray-500 hover:text-primary-500">{product.category}</a></li>
      <li><span class="text-gray-400">/</span></li>
      <li class="text-gray-900 font-medium truncate">{product.name}</li>
    </ol>
  </nav>

  <div class="grid grid-cols-1 lg:grid-cols-2 gap-12">
    
    <!-- Product Images -->
    <div class="space-y-4">
      
      <!-- Main Image -->
      <div class="aspect-square bg-gray-100 rounded-2xl overflow-hidden">
        <img 
          src={product.images[0]} 
          alt={product.name}
          class="w-full h-full object-cover"
          id="main-product-image"
        />
      </div>

      <!-- Thumbnail Images -->
      <div class="grid grid-cols-4 gap-4">
        {product.images.map((image, index) => (
          <button 
            class={`thumbnail-btn aspect-square bg-gray-100 rounded-lg overflow-hidden border-2 transition-all duration-200 ${index === 0 ? 'border-primary-500' : 'border-transparent hover:border-gray-300'}`}
            data-image={image}
            data-index={index}
          >
            <img 
              src={image} 
              alt={`${product.name} vista ${index + 1}`}
              class="w-full h-full object-cover"
            />
          </button>
        ))}
      </div>

      <!-- Image Controls -->
      <div class="flex items-center justify-between">
        <button class="flex items-center text-sm text-gray-600 hover:text-gray-900 transition-colors">
          <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
          Ampliar imagen
        </button>
        
        <div class="flex items-center space-x-2">
          <span class="text-sm text-gray-600" id="image-counter">1 / {product.images.length}</span>
        </div>
      </div>
    </div>

    <!-- Product Information -->
    <div class="space-y-6">
      
      <!-- Product Header -->
      <div>
        <div class="flex items-start justify-between mb-2">
          <div>
            {product.brand && (
              <p class="text-sm text-primary-500 font-medium mb-1">{product.brand}</p>
            )}
            <h1 class="text-3xl font-bold text-gray-900 leading-tight">{product.name}</h1>
          </div>
          <WishlistButton 
            productId={product.id} 
            variant="icon" 
            size="lg"
          />
        </div>

        <!-- Rating and Reviews -->
        {product.rating && (
          <div class="flex items-center space-x-4 mb-4">
            <div class="flex items-center">
              {Array.from({ length: 5 }, (_, i) => (
                <svg 
                  class={`h-5 w-5 ${i < Math.floor(product.rating!) ? 'text-yellow-400' : 'text-gray-300'}`}
                  fill="currentColor" 
                  viewBox="0 0 20 20"
                >
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                </svg>
              ))}
            </div>
            <span class="text-lg font-medium text-gray-900">{product.rating}</span>
            <a href="#reviews" class="text-sm text-primary-500 hover:text-primary-600 underline">
              ({product.reviewCount} reseñas)
            </a>
          </div>
        )}

        <!-- Price -->
        <div class="flex items-center space-x-4 mb-6">
          <span class="text-3xl font-bold text-gray-900">
            ${product.price.toLocaleString('es-CO')}
          </span>
          {product.originalPrice && (
            <>
              <span class="text-xl text-gray-500 line-through">
                ${product.originalPrice.toLocaleString('es-CO')}
              </span>
              <span class="bg-green-100 text-green-800 text-sm font-medium px-2.5 py-0.5 rounded">
                -{discount}% OFF
              </span>
            </>
          )}
        </div>

        <!-- Stock Status -->
        <div class="mb-6">
          {product.inStock ? (
            <div class="flex items-center text-green-600">
              <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
              </svg>
              <span class="font-medium">En stock</span>
              {product.stockQuantity && product.stockQuantity <= 10 && (
                <span class="text-orange-600 ml-2">({product.stockQuantity} disponibles)</span>
              )}
            </div>
          ) : (
            <div class="flex items-center text-red-600">
              <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L10 10.414l1.707-1.707a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
              </svg>
              <span class="font-medium">Agotado</span>
            </div>
          )}
        </div>
      </div>

      <!-- Product Variants -->
      {product.variants && (
        <div class="space-y-4">
          {product.variants.colors && (
            <div>
              <label class="block text-sm font-medium text-gray-900 mb-2">
                Color: <span id="selected-color" class="text-primary-500">Negro</span>
              </label>
              <div class="flex space-x-3">
                {product.variants.colors.map((color, index) => (
                  <button 
                    class={`color-option w-10 h-10 rounded-full border-2 transition-all duration-200 ${index === 0 ? 'border-primary-500 ring-2 ring-primary-200' : 'border-gray-300 hover:border-gray-400'}`}
                    data-color={color}
                    style={`background-color: ${color === 'Negro' ? '#000' : color === 'Rosa' ? '#ec4899' : '#8b5cf6'};`}
                    aria-label={`Seleccionar color ${color}`}
                    title={color}
                  >
                  </button>
                ))}
              </div>
            </div>
          )}

          {product.variants.sizes && (
            <div>
              <label class="block text-sm font-medium text-gray-900 mb-2">
                Tamaño: <span id="selected-size" class="text-primary-500">M</span>
              </label>
              <div class="flex space-x-3">
                {product.variants.sizes.map((size, index) => (
                  <button 
                    class={`size-option px-4 py-2 border rounded-md text-sm font-medium transition-all duration-200 ${index === 1 ? 'border-primary-500 bg-primary-50 text-primary-700' : 'border-gray-300 text-gray-700 hover:border-gray-400'}`}
                    data-size={size}
                  >
                    {size}
                  </button>
                ))}
              </div>
            </div>
          )}
        </div>
      )}

      <!-- Quantity and Add to Cart -->
      <div class="space-y-4">
        <div class="flex items-center space-x-4">
          <label class="text-sm font-medium text-gray-900">Cantidad:</label>
          <div class="flex items-center border border-gray-300 rounded-md">
            <button 
              class="p-2 hover:bg-gray-100 transition-colors disabled:opacity-50"
              id="decrease-qty"
              disabled
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" />
              </svg>
            </button>
            <input 
              type="number" 
              min="1" 
              max="5" 
              value="1"
              class="w-16 px-3 py-2 text-center border-0 focus:outline-none focus:ring-0"
              id="quantity-input"
            />
            <button 
              class="p-2 hover:bg-gray-100 transition-colors disabled:opacity-50"
              id="increase-qty"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
              </svg>
            </button>
          </div>
        </div>

        <!-- Action Buttons -->
        <div class="space-y-3">
          <button 
            class={`w-full py-3 px-6 rounded-md font-medium transition-colors ${product.inStock ? 'bg-primary-500 hover:bg-primary-600 text-white' : 'bg-gray-300 text-gray-500 cursor-not-allowed'}`}
            id="add-to-cart-btn"
            disabled={!product.inStock}
          >
            {product.inStock ? 'Agregar al Carrito' : 'Agotado'}
          </button>
          
          <button 
            class="w-full py-3 px-6 border-2 border-primary-500 text-primary-500 hover:bg-primary-50 rounded-md font-medium transition-colors"
            id="buy-now-btn"
          >
            Comprar Ahora
          </button>
        </div>
      </div>

      <!-- Key Features -->
      {product.features && (
        <div class="border-t border-gray-200 pt-6">
          <h3 class="text-lg font-semibold text-gray-900 mb-4">Características Principales</h3>
          <ul class="space-y-2">
            {product.features.map((feature) => (
              <li class="flex items-center text-sm text-gray-600">
                <svg class="w-4 h-4 mr-3 text-green-500 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                </svg>
                {feature}
              </li>
            ))}
          </ul>
        </div>
      )}

      <!-- Shipping & Returns -->
      <div class="border-t border-gray-200 pt-6 space-y-4">
        <div class="flex items-start space-x-3">
          <svg class="w-5 h-5 mt-0.5 text-primary-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
          </svg>
          <div>
            <h4 class="font-medium text-gray-900">Envío</h4>
            <p class="text-sm text-gray-600">{product.shippingInfo}</p>
          </div>
        </div>
        
        <div class="flex items-start space-x-3">
          <svg class="w-5 h-5 mt-0.5 text-primary-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
          </svg>
          <div>
            <h4 class="font-medium text-gray-900">Devoluciones</h4>
            <p class="text-sm text-gray-600">{product.returnPolicy}</p>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Product Tabs -->
  <div class="mt-16">
    <div class="border-b border-gray-200">
      <nav class="flex space-x-8" aria-label="Tabs">
        <button class="tab-btn border-b-2 border-primary-500 text-primary-600 py-4 px-1 text-sm font-medium active" data-tab="description">
          Descripción
        </button>
        <button class="tab-btn border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 py-4 px-1 text-sm font-medium" data-tab="specifications">
          Especificaciones
        </button>
        <button class="tab-btn border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 py-4 px-1 text-sm font-medium" data-tab="reviews">
          Reseñas ({product.reviewCount})
        </button>
      </nav>
    </div>

    <!-- Tab Content -->
    <div class="py-8">
      
      <!-- Description Tab -->
      <div class="tab-content" id="description-content">
        <div class="prose max-w-none">
          <p class="text-gray-600 leading-relaxed text-lg">{product.description}</p>
        </div>
      </div>

      <!-- Specifications Tab -->
      <div class="tab-content hidden" id="specifications-content">
        {product.specifications && (
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            {Object.entries(product.specifications).map(([key, value]) => (
              <div class="flex justify-between py-3 border-b border-gray-200">
                <span class="font-medium text-gray-900">{key}</span>
                <span class="text-gray-600">{value}</span>
              </div>
            ))}
          </div>
        )}
      </div>

      <!-- Reviews Tab -->
      <div class="tab-content hidden" id="reviews-content">
        <div class="text-center py-12">
          <h3 class="text-lg font-medium text-gray-900 mb-4">Sistema de reseñas próximamente</h3>
          <p class="text-gray-600">Estamos trabajando en nuestro sistema de reseñas para que puedas ver todas las opiniones de nuestros clientes.</p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Image gallery functionality
    const thumbnails = document.querySelectorAll('.thumbnail-btn');
    const mainImage = document.getElementById('main-product-image') as HTMLImageElement;
    const imageCounter = document.getElementById('image-counter');
    
    thumbnails.forEach((thumbnail, index) => {
      thumbnail.addEventListener('click', function(e) {
        const button = e.currentTarget as HTMLButtonElement;
        const imageSrc = button.getAttribute('data-image');
        const imageIndex = parseInt(button.getAttribute('data-index') || '0');
        
        // Update main image
        if (mainImage && imageSrc) {
          mainImage.src = imageSrc;
        }
        
        // Update counter
        if (imageCounter) {
          imageCounter.textContent = `${imageIndex + 1} / ${thumbnails.length}`;
        }
        
        // Update thumbnail selection
        thumbnails.forEach(thumb => {
          thumb.classList.remove('border-primary-500');
          thumb.classList.add('border-transparent', 'hover:border-gray-300');
        });
        button.classList.add('border-primary-500');
        button.classList.remove('border-transparent', 'hover:border-gray-300');
      });
    });

    // Variant selection
    const colorOptions = document.querySelectorAll('.color-option');
    const sizeOptions = document.querySelectorAll('.size-option');
    const selectedColor = document.getElementById('selected-color');
    const selectedSize = document.getElementById('selected-size');
    
    colorOptions.forEach(option => {
      option.addEventListener('click', function(e) {
        const button = e.currentTarget as HTMLButtonElement;
        const color = button.getAttribute('data-color') || '';
        
        // Update UI
        colorOptions.forEach(opt => {
          opt.classList.remove('border-primary-500', 'ring-2', 'ring-primary-200');
          opt.classList.add('border-gray-300', 'hover:border-gray-400');
        });
        button.classList.add('border-primary-500', 'ring-2', 'ring-primary-200');
        button.classList.remove('border-gray-300', 'hover:border-gray-400');
        
        // Update text
        if (selectedColor) {
          selectedColor.textContent = color;
        }
      });
    });

    sizeOptions.forEach(option => {
      option.addEventListener('click', function(e) {
        const button = e.currentTarget as HTMLButtonElement;
        const size = button.getAttribute('data-size') || '';
        
        // Update UI
        sizeOptions.forEach(opt => {
          opt.classList.remove('border-primary-500', 'bg-primary-50', 'text-primary-700');
          opt.classList.add('border-gray-300', 'text-gray-700', 'hover:border-gray-400');
        });
        button.classList.add('border-primary-500', 'bg-primary-50', 'text-primary-700');
        button.classList.remove('border-gray-300', 'text-gray-700', 'hover:border-gray-400');
        
        // Update text
        if (selectedSize) {
          selectedSize.textContent = size;
        }
      });
    });

    // Quantity controls
    const quantityInput = document.getElementById('quantity-input') as HTMLInputElement;
    const decreaseBtn = document.getElementById('decrease-qty') as HTMLButtonElement;
    const increaseBtn = document.getElementById('increase-qty') as HTMLButtonElement;
    
    function updateQuantityButtons() {
      if (!quantityInput || !decreaseBtn || !increaseBtn) return;
      
      const quantity = parseInt(quantityInput.value);
      decreaseBtn.disabled = quantity <= 1;
      increaseBtn.disabled = quantity >= 5;
    }

    if (decreaseBtn) {
      decreaseBtn.addEventListener('click', function() {
        if (!quantityInput) return;
        
        const currentQty = parseInt(quantityInput.value);
        if (currentQty > 1) {
          quantityInput.value = (currentQty - 1).toString();
          updateQuantityButtons();
        }
      });
    }

    if (increaseBtn) {
      increaseBtn.addEventListener('click', function() {
        if (!quantityInput) return;
        
        const currentQty = parseInt(quantityInput.value);
        if (currentQty < 5) {
          quantityInput.value = (currentQty + 1).toString();
          updateQuantityButtons();
        }
      });
    }

    if (quantityInput) {
      quantityInput.addEventListener('change', function() {
        const quantity = Math.max(1, Math.min(5, parseInt(this.value) || 1));
        this.value = quantity.toString();
        updateQuantityButtons();
      });
    }

    // Add to cart functionality
    const addToCartBtn = document.getElementById('add-to-cart-btn') as HTMLButtonElement;
    const buyNowBtn = document.getElementById('buy-now-btn') as HTMLButtonElement;
    
    if (addToCartBtn) {
      addToCartBtn.addEventListener('click', function() {
        if (!quantityInput || !selectedColor || !selectedSize) return;
        
        const quantity = parseInt(quantityInput.value);
        const color = selectedColor.textContent || '';
        const size = selectedSize.textContent || '';
        
        // Show loading state
        this.innerHTML = '<span class="animate-spin inline-block w-4 h-4 border-2 border-current border-t-transparent rounded-full mr-2"></span>Agregando...';
        this.disabled = true;
        
        // Simulate API call
        setTimeout(() => {
          this.textContent = '¡Agregado al Carrito!';
          this.classList.remove('bg-primary-500', 'hover:bg-primary-600');
          this.classList.add('bg-green-500');
          
          // Reset button after delay
          setTimeout(() => {
            this.textContent = 'Agregar al Carrito';
            this.classList.remove('bg-green-500');
            this.classList.add('bg-primary-500', 'hover:bg-primary-600');
            this.disabled = false;
          }, 2000);
        }, 1000);
        
        console.log('Added to cart:', { quantity, color, size });
      });
    }

    if (buyNowBtn) {
      buyNowBtn.addEventListener('click', function() {
        if (!quantityInput || !selectedColor || !selectedSize) return;
        
        // Redirect to checkout with this product
        const productData = {
          id: 'vibrador-luxury-001',
          quantity: parseInt(quantityInput.value),
          color: selectedColor.textContent || '',
          size: selectedSize.textContent || ''
        };
        
        window.location.href = '/checkout?product=' + encodeURIComponent(JSON.stringify(productData));
      });
    }

    // Tab functionality
    const tabButtons = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');
    
    tabButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        const btn = e.currentTarget as HTMLButtonElement;
        const targetTab = btn.getAttribute('data-tab') || '';
        
        // Update button states
        tabButtons.forEach(tabBtn => {
          tabBtn.classList.remove('border-primary-500', 'text-primary-600', 'active');
          tabBtn.classList.add('border-transparent', 'text-gray-500');
        });
        btn.classList.add('border-primary-500', 'text-primary-600', 'active');
        btn.classList.remove('border-transparent', 'text-gray-500');
        
        // Update content
        tabContents.forEach(content => {
          content.classList.add('hidden');
        });
        
        const targetContent = document.getElementById(targetTab + '-content');
        if (targetContent) {
          targetContent.classList.remove('hidden');
        }
      });
    });
  });
</script>