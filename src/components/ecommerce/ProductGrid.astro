---
// src/components/ecommerce/ProductGrid.astro
import ProductCard from './ProductCard.astro';
import CategoryFilter from './CategoryFilter.astro';

export interface Props {
  products?: any[];
  showFilters?: boolean;
  title?: string;
  subtitle?: string;
  columns?: 2 | 3 | 4;
  category?: string;
}

const { 
  products = [], 
  showFilters = true, 
  title = "Nuestros Productos",
  subtitle = "Descubre nuestra colección premium",
  columns = 4,
  category
} = Astro.props;

// Mock products for demo
const mockProducts = [
  {
    id: "1",
    name: "Vibrador de Lujo Premium",
    price: 299000,
    originalPrice: 399000,
    image: "/images/productos/vibrador-luxury.jpg",
    category: "Juguetes",
    isNew: true,
    rating: 4.8,
    inStock: true,
    reviewCount: 142
  },
  {
    id: "2", 
    name: "Conjunto de Lencería Elegante",
    price: 89000,
    originalPrice: 120000,
    image: "/images/productos/lenceria-elegante.jpg",
    category: "Lencería",
    isNew: false,
    rating: 4.6,
    inStock: true,
    reviewCount: 89
  },
  {
    id: "3",
    name: "Lubricante Base Agua Orgánico",
    price: 45000,
    image: "/images/productos/lubricante-organico.jpg", 
    category: "Lubricantes",
    isNew: true,
    rating: 4.9,
    inStock: true,
    reviewCount: 234
  },
  {
    id: "4",
    name: "Kit Wellness Couples",
    price: 189000,
    originalPrice: 249000,
    image: "/images/productos/kit-wellness.jpg",
    category: "Wellness",
    isNew: false,
    rating: 4.7,
    inStock: false,
    reviewCount: 67
  },
  {
    id: "5",
    name: "Anillo Vibrador Silicona",
    price: 59000,
    image: "/images/productos/anillo-vibrador.jpg",
    category: "Juguetes", 
    isNew: false,
    rating: 4.5,
    inStock: true,
    reviewCount: 156
  },
  {
    id: "6",
    name: "Body de Encaje Premium",
    price: 129000,
    originalPrice: 179000,
    image: "/images/productos/body-encaje.jpg",
    category: "Lencería",
    isNew: true,
    rating: 4.8,
    inStock: true,
    reviewCount: 92
  }
];

const displayProducts = products.length > 0 ? products : mockProducts;
const gridCols = {
  2: 'grid-cols-1 sm:grid-cols-2',
  3: 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3', 
  4: 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4'
};
---

<section class="bg-white">
  <!-- Header Section -->
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="text-center mb-8">
      <h2 class="text-3xl font-bold text-gray-900 mb-4">{title}</h2>
      <p class="text-lg text-gray-600 max-w-2xl mx-auto">{subtitle}</p>
    </div>

    <!-- Filters and Controls -->
    {showFilters && (
      <div class="mb-8">
        <div class="flex flex-col lg:flex-row justify-between items-start lg:items-center gap-6">
          
          <!-- Category Filter -->
          <div class="flex-1 w-full lg:w-auto">
            <CategoryFilter selectedCategory={category} />
          </div>

          <!-- View Options and Sort -->
          <div class="flex items-center gap-4 w-full lg:w-auto justify-between lg:justify-end">
            
            <!-- Results Count -->
            <span class="text-sm text-gray-600">
              {displayProducts.length} productos
            </span>

            <!-- Sort Dropdown -->
            <div class="relative">
              <select 
                class="appearance-none bg-white border border-gray-300 rounded-md px-4 py-2 pr-8 text-sm focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                id="sort-products"
              >
                <option value="featured">Destacados</option>
                <option value="price-low">Precio: Menor a Mayor</option>
                <option value="price-high">Precio: Mayor a Menor</option>
                <option value="newest">Más Recientes</option>
                <option value="rating">Mejor Valorados</option>
                <option value="name">Nombre A-Z</option>
              </select>
              <div class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
                <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                </svg>
              </div>
            </div>

            <!-- Grid View Toggle -->
            <div class="flex bg-gray-100 rounded-md p-1">
              <button 
                class="grid-toggle p-2 rounded text-gray-600 hover:text-gray-900 transition-colors active"
                data-columns="4"
                aria-label="Vista 4 columnas"
              >
                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M3 3h4v4H3V3zm6 0h4v4H9V3zm6 0h4v4h-4V3zM3 9h4v4H3V9zm6 0h4v4H9V9zm6 0h4v4h-4V9zM3 15h4v4H3v-4zm6 0h4v4H9v-4zm6 0h4v4h-4v-4z"/>
                </svg>
              </button>
              <button 
                class="grid-toggle p-2 rounded text-gray-600 hover:text-gray-900 transition-colors"
                data-columns="3"
                aria-label="Vista 3 columnas"
              >
                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M3 3h6v6H3V3zm8 0h6v6h-6V3zM3 11h6v6H3v-6zm8 0h6v6h-6v-6z"/>
                </svg>
              </button>
              <button 
                class="grid-toggle p-2 rounded text-gray-600 hover:text-gray-900 transition-colors"
                data-columns="2"
                aria-label="Vista 2 columnas"
              >
                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M3 3h8v8H3V3zm10 0h8v8h-8V3zM3 13h8v8H3v-8zm10 0h8v8h-8v-8z"/>
                </svg>
              </div>
            </div>
          </div>
        </div>
      </div>
    )}

    <!-- Products Grid -->
    <div id="products-grid" class={`grid gap-6 ${gridCols[columns]}`}>
      {displayProducts.map((product) => (
        <ProductCard product={product} />
      ))}
    </div>

    <!-- Empty State -->
    {displayProducts.length === 0 && (
      <div class="text-center py-16">
        <div class="text-gray-400 mb-4">
          <svg class="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2 2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-2.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 009.586 13H7" />
          </svg>
        </div>
        <h3 class="text-lg font-medium text-gray-900 mb-2">No se encontraron productos</h3>
        <p class="text-gray-600 mb-6">Intenta ajustar los filtros o buscar algo diferente.</p>
        <a href="/productos" class="btn-primary">
          Ver todos los productos
        </a>
      </div>
    )}

    <!-- Load More Button -->
    {displayProducts.length > 0 && displayProducts.length >= 12 && (
      <div class="text-center mt-12">
        <button 
          class="btn-outline hover:btn-primary text-lg px-8 py-3 transition-all duration-200"
          id="load-more-btn"
        >
          Cargar más productos
        </button>
      </div>
    )}
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Grid view toggle functionality
    const gridToggles = document.querySelectorAll('.grid-toggle');
    const productsGrid = document.getElementById('products-grid');
    
    gridToggles.forEach(toggle => {
      toggle.addEventListener('click', function(e) {
        const button = e.currentTarget as HTMLButtonElement;
        const columns = button.getAttribute('data-columns') || '4';
        
        // Update active state
        gridToggles.forEach(t => t.classList.remove('active', 'text-primary-500', 'bg-white'));
        button.classList.add('active', 'text-primary-500', 'bg-white');
        
        // Update grid classes
        if (productsGrid) {
          productsGrid.className = productsGrid.className.replace(/grid-cols-\S+/g, '');
          
          const gridClasses: Record<string, string> = {
            '2': 'grid gap-6 grid-cols-1 sm:grid-cols-2',
            '3': 'grid gap-6 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3',
            '4': 'grid gap-6 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4'
          };
          
          productsGrid.className = gridClasses[columns] || gridClasses['4'];
        }
      });
    });

    // Sort functionality
    const sortSelect = document.getElementById('sort-products') as HTMLSelectElement;
    if (sortSelect) {
      sortSelect.addEventListener('change', function() {
        const sortValue = this.value;
        // Here you would implement the actual sorting logic
        console.log('Sorting by:', sortValue);
        
        // Show loading state
        if (productsGrid) {
          productsGrid.style.opacity = '0.6';
          setTimeout(() => {
            productsGrid.style.opacity = '1';
          }, 300);
        }
      });
    }

    // Load more functionality
    const loadMoreBtn = document.getElementById('load-more-btn');
    if (loadMoreBtn) {
      loadMoreBtn.addEventListener('click', function() {
        this.innerHTML = '<span class="animate-spin inline-block w-4 h-4 border-2 border-current border-t-transparent rounded-full mr-2"></span>Cargando...';
        
        // Simulate loading
        setTimeout(() => {
          this.textContent = 'Cargar más productos';
          // Here you would load more products
        }, 1000);
      });
    }
  });
</script>

<style>
  .grid-toggle.active {
    @apply text-primary-500 bg-white shadow-sm;
  }
  
  .btn-primary {
    @apply bg-primary-500 hover:bg-primary-600 text-white font-medium py-2 px-4 rounded-md transition-colors duration-200;
  }
  
  .btn-outline {
    @apply border border-primary-500 text-primary-500 hover:bg-primary-500 hover:text-white font-medium py-2 px-4 rounded-md transition-all duration-200;
  }
</style>