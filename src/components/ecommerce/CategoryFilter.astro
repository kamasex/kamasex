---
// src/components/ecommerce/CategoryFilter.astro
import { CATEGORIES } from '../../utils/constants';

export interface Props {
  selectedCategory?: string;
  showPriceRange?: boolean;
  showBrands?: boolean;
  showRating?: boolean;
  compact?: boolean;
}

const {
  selectedCategory,
  showPriceRange = true,
  showBrands = true, 
  showRating = true,
  compact = false
} = Astro.props;

const brands = [
  'Lovense', 'We-Vibe', 'LELO', 'Satisfyer', 'Durex', 'Kamasutra', 'Ann Summers', 'CalExotics'
];

const priceRanges = [
  { label: 'Menos de $50.000', min: 0, max: 50000 },
  { label: '$50.000 - $100.000', min: 50000, max: 100000 },
  { label: '$100.000 - $200.000', min: 100000, max: 200000 },
  { label: '$200.000 - $400.000', min: 200000, max: 400000 },
  { label: 'Más de $400.000', min: 400000, max: 999999 }
];
---

<div class={`bg-white ${compact ? 'p-4' : 'p-6'} rounded-lg border border-gray-200`}>
  <!-- Mobile Filter Toggle -->
  <div class="lg:hidden mb-4">
    <button 
      class="flex items-center justify-between w-full text-left font-medium text-gray-900 bg-gray-50 px-4 py-3 rounded-md hover:bg-gray-100 transition-colors"
      id="mobile-filter-toggle"
      aria-expanded="false"
    >
      <span class="flex items-center">
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707v4.586a1 1 0 01-.553.894l-4 2A1 1 0 019 20.586V14.414a1 1 0 00-.293-.707L2.293 7.293A1 1 0 012 6.586V4z" />
        </svg>
        Filtros
      </span>
      <svg class="w-5 h-5 transform transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
      </svg>
    </button>
  </div>

  <!-- Filter Content -->
  <div class="filter-content hidden lg:block" id="filter-content">
    
    <!-- Active Filters -->
    <div class="mb-6" id="active-filters" style="display: none;">
      <div class="flex items-center justify-between mb-3">
        <h4 class="font-medium text-gray-900">Filtros activos</h4>
        <button class="text-sm text-primary-500 hover:text-primary-600" id="clear-all-filters">
          Limpiar todo
        </button>
      </div>
      <div class="flex flex-wrap gap-2" id="active-filters-list">
        <!-- Active filter tags will be inserted here by JavaScript -->
      </div>
    </div>

    <!-- Categories -->
    <div class="mb-6">
      <h4 class="font-medium text-gray-900 mb-3">Categorías</h4>
      <div class="space-y-2">
        <label class="flex items-center cursor-pointer group">
          <input 
            type="radio" 
            name="category" 
            value="" 
            class="sr-only"
            checked={!selectedCategory}
          />
          <div class="filter-radio"></div>
          <span class="ml-3 text-gray-700 group-hover:text-primary-500 transition-colors">
            Todas las categorías
          </span>
        </label>
        
        {CATEGORIES.map((category) => (
          <label class="flex items-center cursor-pointer group">
            <input 
              type="radio" 
              name="category" 
              value={category.slug}
              class="sr-only"
              checked={selectedCategory === category.slug}
            />
            <div class="filter-radio"></div>
            <span class="ml-3 text-gray-700 group-hover:text-primary-500 transition-colors">
              {category.name}
            </span>
          </label>
        ))}
      </div>
    </div>

    <!-- Price Range -->
    {showPriceRange && (
      <div class="mb-6">
        <h4 class="font-medium text-gray-900 mb-3">Rango de Precio</h4>
        
        <!-- Custom Range -->
        <div class="mb-4">
          <div class="flex items-center space-x-2">
            <div class="flex-1">
              <input 
                type="number" 
                placeholder="Mínimo"
                class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                id="price-min"
              />
            </div>
            <span class="text-gray-400">-</span>
            <div class="flex-1">
              <input 
                type="number" 
                placeholder="Máximo"
                class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                id="price-max"
              />
            </div>
            <button 
              class="bg-primary-500 text-white px-4 py-2 rounded-md hover:bg-primary-600 transition-colors text-sm"
              id="apply-price-range"
            >
              Aplicar
            </button>
          </div>
        </div>

        <!-- Predefined Ranges -->
        <div class="space-y-2">
          {priceRanges.map((range) => (
            <label class="flex items-center cursor-pointer group">
              <input 
                type="checkbox" 
                class="sr-only price-range-checkbox"
                data-min={range.min}
                data-max={range.max}
              />
              <div class="filter-checkbox"></div>
              <span class="ml-3 text-gray-700 group-hover:text-primary-500 transition-colors text-sm">
                {range.label}
              </span>
            </label>
          ))}
        </div>
      </div>
    )}

    <!-- Brands -->
    {showBrands && (
      <div class="mb-6">
        <h4 class="font-medium text-gray-900 mb-3">Marcas</h4>
        <div class="space-y-2 max-h-40 overflow-y-auto">
          {brands.map((brand) => (
            <label class="flex items-center cursor-pointer group">
              <input 
                type="checkbox" 
                class="sr-only brand-checkbox"
                value={brand}
              />
              <div class="filter-checkbox"></div>
              <span class="ml-3 text-gray-700 group-hover:text-primary-500 transition-colors text-sm">
                {brand}
              </span>
            </label>
          ))}
        </div>
      </div>
    )}

    <!-- Rating -->
    {showRating && (
      <div class="mb-6">
        <h4 class="font-medium text-gray-900 mb-3">Calificación</h4>
        <div class="space-y-2">
          {[4, 3, 2, 1].map((rating) => (
            <label class="flex items-center cursor-pointer group">
              <input 
                type="checkbox" 
                class="sr-only rating-checkbox"
                value={rating}
              />
              <div class="filter-checkbox"></div>
              <div class="ml-3 flex items-center">
                <div class="flex items-center">
                  {Array.from({ length: 5 }, (_, i) => (
                    <svg 
                      class={`h-4 w-4 ${i < rating ? 'text-yellow-400' : 'text-gray-300'}`}
                      fill="currentColor" 
                      viewBox="0 0 20 20"
                    >
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                    </svg>
                  ))}
                </div>
                <span class="text-sm text-gray-600 ml-2">y más</span>
              </div>
            </label>
          ))}
        </div>
      </div>
    )}

    <!-- Additional Filters -->
    <div class="mb-6">
      <h4 class="font-medium text-gray-900 mb-3">Otros</h4>
      <div class="space-y-2">
        <label class="flex items-center cursor-pointer group">
          <input type="checkbox" class="sr-only" id="filter-new" />
          <div class="filter-checkbox"></div>
          <span class="ml-3 text-gray-700 group-hover:text-primary-500 transition-colors text-sm">
            Productos nuevos
          </span>
        </label>
        
        <label class="flex items-center cursor-pointer group">
          <input type="checkbox" class="sr-only" id="filter-sale" />
          <div class="filter-checkbox"></div>
          <span class="ml-3 text-gray-700 group-hover:text-primary-500 transition-colors text-sm">
            En oferta
          </span>
        </label>
        
        <label class="flex items-center cursor-pointer group">
          <input type="checkbox" class="sr-only" id="filter-stock" />
          <div class="filter-checkbox"></div>
          <span class="ml-3 text-gray-700 group-hover:text-primary-500 transition-colors text-sm">
            En stock
          </span>
        </label>
        
        <label class="flex items-center cursor-pointer group">
          <input type="checkbox" class="sr-only" id="filter-featured" />
          <div class="filter-checkbox"></div>
          <span class="ml-3 text-gray-700 group-hover:text-primary-500 transition-colors text-sm">
            Destacados
          </span>
        </label>
      </div>
    </div>

    <!-- Apply Filters Button -->
    <div class="pt-4 border-t border-gray-200">
      <button 
        class="w-full bg-primary-500 text-white py-3 rounded-md hover:bg-primary-600 transition-colors font-medium"
        id="apply-filters"
      >
        Aplicar Filtros
      </button>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Mobile filter toggle
    const mobileToggle = document.getElementById('mobile-filter-toggle');
    const filterContent = document.getElementById('filter-content');
    
    if (mobileToggle && filterContent) {
      mobileToggle.addEventListener('click', function() {
        const isExpanded = this.getAttribute('aria-expanded') === 'true';
        this.setAttribute('aria-expanded', (!isExpanded).toString());
        filterContent.classList.toggle('hidden');
        
        // Rotate arrow
        const arrow = this.querySelector('svg:last-child') as HTMLElement;
        if (arrow) {
          arrow.style.transform = isExpanded ? 'rotate(0deg)' : 'rotate(180deg)';
        }
      });
    }

    // Custom radio and checkbox styling
    function initializeCustomInputs() {
      // Radio buttons
      document.querySelectorAll('input[type="radio"]').forEach(radio => {
        const radioInput = radio as HTMLInputElement;
        const customRadio = radioInput.nextElementSibling as HTMLElement;
        if (customRadio && customRadio.classList.contains('filter-radio')) {
          updateRadioStyle(radioInput, customRadio);
          
          radioInput.addEventListener('change', function() {
            // Update all radios in the same group
            document.querySelectorAll(`input[name="${this.name}"]`).forEach(r => {
              const rInput = r as HTMLInputElement;
              const cr = rInput.nextElementSibling as HTMLElement;
              if (cr) updateRadioStyle(rInput, cr);
            });
          });
        }
      });

      // Checkboxes
      document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
        const checkboxInput = checkbox as HTMLInputElement;
        const customCheckbox = checkboxInput.nextElementSibling as HTMLElement;
        if (customCheckbox && customCheckbox.classList.contains('filter-checkbox')) {
          updateCheckboxStyle(checkboxInput, customCheckbox);
          
          checkboxInput.addEventListener('change', function() {
            updateCheckboxStyle(this, customCheckbox);
          });
        }
      });
    }

    function updateRadioStyle(radio: HTMLInputElement, customRadio: HTMLElement) {
      if (radio.checked) {
        customRadio.className = 'filter-radio w-4 h-4 rounded-full border-2 border-primary-500 bg-primary-500 relative';
        customRadio.innerHTML = '<div class="absolute inset-0.5 bg-white rounded-full"></div>';
      } else {
        customRadio.className = 'filter-radio w-4 h-4 rounded-full border-2 border-gray-300 bg-white';
        customRadio.innerHTML = '';
      }
    }

    function updateCheckboxStyle(checkbox: HTMLInputElement, customCheckbox: HTMLElement) {
      if (checkbox.checked) {
        customCheckbox.className = 'filter-checkbox w-4 h-4 rounded border-2 border-primary-500 bg-primary-500 flex items-center justify-center';
        customCheckbox.innerHTML = '<svg class="w-3 h-3 text-white" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path></svg>';
      } else {
        customCheckbox.className = 'filter-checkbox w-4 h-4 rounded border-2 border-gray-300 bg-white';
        customCheckbox.innerHTML = '';
      }
    }

    // Initialize custom inputs
    initializeCustomInputs();

    // Apply filters functionality
    const applyFiltersBtn = document.getElementById('apply-filters');
    if (applyFiltersBtn) {
      applyFiltersBtn.addEventListener('click', function() {
        // Collect all filter values
        const categoryInput = document.querySelector('input[name="category"]:checked') as HTMLInputElement;
        const brandCheckboxes = document.querySelectorAll('.brand-checkbox:checked') as NodeListOf<HTMLInputElement>;
        const ratingCheckboxes = document.querySelectorAll('.rating-checkbox:checked') as NodeListOf<HTMLInputElement>;
        const priceMinInput = document.getElementById('price-min') as HTMLInputElement;
        const priceMaxInput = document.getElementById('price-max') as HTMLInputElement;
        const filterNewInput = document.getElementById('filter-new') as HTMLInputElement;
        const filterSaleInput = document.getElementById('filter-sale') as HTMLInputElement;
        const filterStockInput = document.getElementById('filter-stock') as HTMLInputElement;
        const filterFeaturedInput = document.getElementById('filter-featured') as HTMLInputElement;

        const filters = {
          category: categoryInput?.value || '',
          brands: Array.from(brandCheckboxes).map(cb => cb.value),
          ratings: Array.from(ratingCheckboxes).map(cb => cb.value),
          priceMin: priceMinInput?.value || '',
          priceMax: priceMaxInput?.value || '',
          isNew: filterNewInput?.checked || false,
          onSale: filterSaleInput?.checked || false,
          inStock: filterStockInput?.checked || false,
          featured: filterFeaturedInput?.checked || false
        };

        console.log('Applied filters:', filters);
        
        // Here you would apply the filters to your product list
        // For now, we'll just show a loading state
        this.innerHTML = '<span class="animate-spin inline-block w-4 h-4 border-2 border-current border-t-transparent rounded-full mr-2"></span>Aplicando...';
        
        setTimeout(() => {
          this.textContent = 'Aplicar Filtros';
        }, 1000);
      });
    }

    // Clear all filters
    const clearAllBtn = document.getElementById('clear-all-filters');
    if (clearAllBtn) {
      clearAllBtn.addEventListener('click', function() {
        // Reset all form inputs
        document.querySelectorAll('input[type="radio"], input[type="checkbox"]').forEach(input => {
          const inputElement = input as HTMLInputElement;
          if (inputElement.name === 'category' && inputElement.value === '') {
            inputElement.checked = true;
          } else {
            inputElement.checked = false;
          }
        });
        
        const priceMinInput = document.getElementById('price-min') as HTMLInputElement;
        const priceMaxInput = document.getElementById('price-max') as HTMLInputElement;
        
        if (priceMinInput) priceMinInput.value = '';
        if (priceMaxInput) priceMaxInput.value = '';
        
        // Re-initialize custom inputs
        initializeCustomInputs();
        
        // Hide active filters
        const activeFilters = document.getElementById('active-filters');
        if (activeFilters) {
          activeFilters.style.display = 'none';
        }
      });
    }
  });
</script>